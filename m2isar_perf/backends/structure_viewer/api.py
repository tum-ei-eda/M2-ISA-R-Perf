# 
# Copyright 2022 Chair of EDA, Technical University of Munich
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#       http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 

import argparse
import pathlib
import sys
import pickle

# from backends.metaMathModel.ModelTransformer import ModelTransformer
from .StructuralModelPrinter import StructuralModelPrinter
# from .MathModelPrinter import MathModelPrinter
from backends.common import dirUtils
from common import common as cf # common functions

def execute(model_, outDir_):

    print()
    print("-- BACKEND: STRUCTRUE_VIEWER --")
    
    # Create temp and out directory
    print(" > Creating temp and output directories")
    curDir = pathlib.Path(__file__).parents[0]
    tempDir = curDir / "temp"
    
    outDirDict = {}
    for corePerfModel_i in model_.getAllCorePerfModels():
        dirUtils.createOrReplaceDir(tempDir / corePerfModel_i.name, suppress_warning=True) # Create temp dir
    
        outDir = dirUtils.getDocDirPath(outDir_, corePerfModel_i.name) # Create out dir
        dirUtils.createOrReplaceDir(outDir)
        outDirDict[corePerfModel_i.name] = outDir

        (outDir / dirUtils.getOverviewDirName()).mkdir() # Create subdirs of out dir
        for instr_i in corePerfModel_i.getAllInstructions():
            (outDir / instr_i.name).mkdir()
        

    print(" > Generating structure diagrams")
    modelPrinter = StructuralModelPrinter(tempDir, curDir / "templates", outDirDict)
    modelPrinter.printModel(model_)

    
# Run this if backend is called stand-alone (i.e. this file is directly called)
if __name__ == '__main__':

    # Parse command line arguments
    argParser = argparse.ArgumentParser()
    argParser.add_argument("model", help="File containing the input model (generated by frontend)")
    argParser.add_argument("-o", "--output_dir", help="Path to store generated files")
    args = argParser.parse_args()

    # Load model from file
    modelFile = pathlib.Path(args.model).resolve()
    if not modelFile.is_file():
        sys.exit("FATAL: Specified model (%s) does not exist!" % modelFile)
    with modelFile.open('rb') as f:
        model = pickle.load(f)

    outDir = cf.resolveOutDir(args.output_dir, __file__)
        
    # Call main routine of graph_printer backend
    execute(model, outDir)
