# 
# Copyright 2022 Chair of EDA, Technical University of Munich
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#       http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#!/usr/bin/env python3

#from backends.metaMathModel.ModelTransformer import ModelTransformer
#from .CodeGenerator import CodeGenerator
#from backends import utils as backendUtils

import argparse
import pathlib
import os
import pickle
import sys

from .Translator import Translator
from backends import utils as backendUtils

def main(model_):

    print(">> HELLO FROM THE MONITOR GEN <<")

    print("Creating temp directories")
    curDir = pathlib.Path(__file__).parents[0]
    tempDir = backendUtils.createOrReplaceDir(curDir / "temp")
    for corePerfModel_i in model_.getAllCorePerfModels():
        backendUtils.createOrReplaceDir(tempDir / corePerfModel_i.name)

    print("Creating json description of desired trace")
    Translator(tempDir).createTraceDescriptions(model_)

    print("Calling Trace-Generator to create monitors")
    traceGenRun = curDir / "trace_generator/trace_gen/run.py"
    for corePerfModel_i in model_.getAllCorePerfModels():
        traceFile = tempDir / corePerfModel_i.name / "trace.json"
        os.system ("python3 %s %s -p" % (str(traceGenRun), str(traceFile)))

        
# Run this if backend is called stand-alone (i.e. this file is directly called)
if __name__ == '__main__':
    
    # Parse command line arguments
    argParser = argparse.ArgumentParser()
    argParser.add_argument("model", help="File containing the input model (generated by frontend)")
    args = argParser.parse_args()

    # Load model from file
    modelFile = pathlib.Path(args.model).resolve()
    if not modelFile.is_file():
        sys.exit("FATAL: Specified model (%s) does not exist!" % modelFile)
    with modelFile.open('rb') as f:
        model = pickle.load(f) 

    # Call main routine of estimator_gen backend
    main(model)
