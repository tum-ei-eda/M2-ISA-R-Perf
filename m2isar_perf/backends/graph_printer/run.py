# 
# Copyright 2022 Chair of EDA, Technical University of Munich
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#       http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 

import argparse
import pathlib
import sys
import pickle

from backends.metaMathModel.ModelTransformer import ModelTransformer
from .ModelPrinter import ModelPrinter
from .MathModelPrinter import MathModelPrinter
from . import Defs
from backends import utils as backendUtils

def main(model_):

    # Create temp and out directory
    print("Creating temp and output directories")
    curDir = pathlib.Path(__file__).parents[0]
    #tempDir = backendUtils.createOrReplaceDir(curDir / "temp")
    #outDir = backendUtils.createOrReplaceDir(curDir / "out")
    tempDir = curDir / "temp"
    outDir = curDir / "out"
    for corePerfModel in model_.getAllCorePerfModels():
        backendUtils.createOrReplaceDir(tempDir / corePerfModel.name)
        backendUtils.createOrReplaceDir(outDir / corePerfModel.name / Defs.OVERVIEW_FOLDER)
        for instr in corePerfModel.getAllInstructions():
            backendUtils.createOrReplaceDir(outDir / corePerfModel.name / instr.name )
    
    # Create printer instances
    modelPrinter = ModelPrinter(tempDir, curDir / "templates", outDir)
    mathModelPrinter = MathModelPrinter(tempDir, outDir)

    # Print (top) model
    print()
    print("Print model diagrams")
    modelPrinter.printModel(model_)

    # Print math models
    print("Print math-model graphs")
    print()
    print("Transforming top model into math-model")
    mathModel = ModelTransformer().transform(model_)
    print()
    mathModelPrinter.printMathModel(mathModel)
        
# Run this if backend is called stand-alone (i.e. this file is directly called)
if __name__ == '__main__':

    # Parse command line arguments
    argParser = argparse.ArgumentParser()
    argParser.add_argument("model", help="File containing the input model (generated by frontend)")
    args = argParser.parse_args()

    # Load model from file
    modelFile = pathlib.Path(args.model).resolve()
    if not modelFile.is_file():
        sys.exit("FATAL: Specified model (%s) does not exist!" % modelFile)
    with modelFile.open('rb') as f:
        model = pickle.load(f)

    # Call main routine of graph_printer backend
    main(model)
