/*********************************** Microaction Section ***********************************/
Connector {Pc, Pc_np, Pc_p}
Connector {Xa, Xb, Xd}

Resource {PCGen, Decoder, JumpDecoder, ALU, LSU, CSR}
Resource {MUL, MULH(5)} // Approximated delay. Replace with external models?
Resource {DIV(divider), DIVU(divider_u)}
Resource {IPort_R, DPort_R, DPort_W}

Microaction {
  uA_IFetch        (Pc -> IPort_R),
  uA_PCGen         (Pc -> PCGen -> Pc_p),
  uA_Decode        (Decoder),
  uA_JumpDecode    (JumpDecoder -> Pc_np),
  uA_JumpDecodeReg (Xa -> JumpDecoder -> Pc_np), // Maybe subpipelined?
  uA_OF_A          (Xa),
  uA_OF_B          (Xb),
  uA_ALU_RegUpdate (ALU -> Xd),
  uA_ALU_Branch    (ALU -> Pc_np),
  uA_CSR           (CSR -> Xd),
  uA_LSU           (LSU),
  uA_MUL           (MUL -> Xd),
  uA_MULH          (MULH -> Xd),
  uA_DIV           (DIV -> Xd),
  uA_DIVU          (DIVU -> Xd),
  uA_Memory_R      (DPort_R -> Xd),
  uA_Memory_W      (DPort_W)
}

/************************************ Stages & Pipeline ************************************/

Stage {
  IF_stage (uA_IFetch, uA_PCGen),
  ID_stage (uA_Decode, uA_JumpDecode, uA_JumpDecodeReg, uA_OF_A, uA_OF_B),
  EX_stage (uA_ALU_RegUpdate, uA_ALU_Branch, uA_CSR, uA_LSU, uA_MUL, uA_MULH, uA_DIV, uA_DIVU),
  WB_stage (uA_Memory_R, uA_Memory_W)
}

Pipeline CV32E40P_pipeline (IF_stage -> ID_stage -> EX_stage -> WB_stage)

/************************************* External Models *************************************/
TraceValue {rs1, rs2, rd, pc, brTarget, rs2_data}

ConnectorModel regModel (
  link : "models/common/StandardRegisterModel.h"
  trace : {rs1, rs2, rd}
  connectorIn : Xd
  connectorOut : {Xa, Xb}
)

ConnectorModel staBranchPredModel (
  link : "models/common/StaticBranchPredictModel.h"
  trace : {pc, brTarget}
  connectorIn : {Pc_np, Pc_p}
  connectorOut : Pc
)

ResourceModel divider (
  link: "models/cv32e40p/DividerModel.h"
  trace: rs2_data
)

ResourceModel divider_u (
  link: "models/cv32e40p/DividerUnsignedModel.h"
  trace: rs2_data
)

/*********************************** Instruction Section ***********************************/
InstrGroup {
  Arith_Ra_Rb (add, sub, xor, or, and, slt, sltu, sll, srl, sra),
  Arith_Ra (addi, xori, ori, andi, slti, sltiu, slli, srli, srai),
  Arith_X (auipc, lui),
  Mul_Ra_Rb (mul),
  MulH_Ra_Rb (mulh, mulhu, mulhsu),
  Div_Ra_Rb (div, rem),
  DivU_Ra_Rb (divu, remu),
  Csr_Ra (csrrw, csrrs, csrrc),
  Csr_X (csrrwi, csrrsi, csrrci),
  Store (sb, sh, sw),
  Load (lw, lh, lhu, lb, lbu),
  Branch_Ra_Rb (beq, bne, blt, bge, bltu, bgeu),
  Default ([?])
}

MicroactionMapping {
  [ALL] :        {uA_IFetch, uA_PCGen},
  Arith_Ra_Rb :  {uA_Decode, uA_OF_A, uA_OF_B, uA_ALU_RegUpdate},
  Arith_Ra :     {uA_Decode, uA_OF_A, uA_ALU_RegUpdate},
  Arith_X :      {uA_Decode, uA_ALU_RegUpdate},
  Mul_Ra_Rb :    {uA_Decode, uA_OF_A, uA_OF_B, uA_MUL},
  MulH_Ra_Rb :   {uA_Decode, uA_OF_A, uA_OF_B, uA_MULH},
  Div_Ra_Rb :    {uA_Decode, uA_OF_A, uA_OF_B, uA_DIV},
  DivU_Ra_Rb :   {uA_Decode, uA_OF_A, uA_OF_B, uA_DIVU},
  Csr_Ra :       {uA_Decode, uA_OF_A, uA_CSR},
  Csr_X :        {uA_Decode, uA_CSR},
  Store :        {uA_Decode, uA_OF_A, uA_OF_B, uA_LSU, uA_Memory_W},
  Load :         {uA_Decode, uA_OF_A, uA_LSU, uA_Memory_R},
  Branch_Ra_Rb : {uA_Decode, uA_OF_A, uA_OF_B, uA_ALU_Branch},
  jal :          {uA_JumpDecode, uA_ALU_RegUpdate},
  jalr :         {uA_JumpDecodeReg, uA_ALU_RegUpdate}
}


TraceValueMapping {
  [ALL] : {
      pc = "${ic.current_address_}"
  },
  Arith_Ra_Rb : {
    rs1 = "${${BITFIELD rs1 [(0:19,15)]}}",
    rs2 = "${${BITFIELD rs2 [(0:24,20)]}}",
    rd  = "${${BITFIELD rd [(0:11,7)]}}"
  },
  Arith_Ra : {
    rs1 = "${${BITFIELD rs1 [(0:19,15)]}}",
    rd  = "${${BITFIELD rd [(0:11,7)]}}"
  },
  Arith_X : {
    rd  = "${${BITFIELD rd [(0:11,7)]}}"
  },
  Mul_Ra_Rb : {
    rs1 = "${${BITFIELD rs1 [(0:19,15)]}}",
    rs2 = "${${BITFIELD rs2 [(0:24,20)]}}",
    rd  = "${${BITFIELD rd [(0:11,7)]}}"
  },
  MulH_Ra_Rb : {
    rs1 = "${${BITFIELD rs1 [(0:19,15)]}}",
    rs2 = "${${BITFIELD rs2 [(0:24,20)]}}",
    rd  = "${${BITFIELD rd [(0:11,7)]}}"
  },
  Div_Ra_Rb : {
    rs1 = "${${BITFIELD rs1 [(0:19,15)]}}",
    rs2 = "${${BITFIELD rs2 [(0:24,20)]}}",
    rd  = "${${BITFIELD rd [(0:11,7)]}}",
    rs2_data = "*((RV32IMACFD*)cpu)->X[${ ${BITFIELD rs2_data [(0:24,20)]} }]"
  },
  DivU_Ra_Rb : {
    rs1 = "${${BITFIELD rs1 [(0:19,15)]}}",
    rs2 = "${${BITFIELD rs2 [(0:24,20)]}}",
    rd  = "${${BITFIELD rd [(0:11,7)]}}",
    rs2_data = "*((RV32IMACFD*)cpu)->X[${ ${BITFIELD rs2_data [(0:24,20)]} }]"
  },
  Csr_Ra : {
    rs1 = "${${BITFIELD rs1 [(0:19,15)]}}",
    rd  = "${${BITFIELD rd [(0:11,7)]}}"
  },
  Csr_X : {
    rd  = "${${BITFIELD rd [(0:11,7)]}}"
  },
  Store : {
    rs1 = "${${BITFIELD rs1 [(0:19,15)]}}",
    rs2 = "${${BITFIELD rs2 [(0:24,20)]}}"
  },
  Load : {
    rs1 = "${${BITFIELD rs1 [(0:19,15)]}}",
    rd  = "${${BITFIELD rd [(0:11,7)]}}"
  },
  Branch_Ra_Rb : {
    rs1 = "${${BITFIELD rs1 [(0:19,15)]}}",
    rs2 = "${${BITFIELD rs2 [(0:24,20)]}}",
    brTarget = "${std::to_string(ic.current_address_ + (((etiss_int16)(${BITFIELD imm [(12:31,31)|(11:7,7)|(5:30,25)|(1:11,8)]} << 3)) >> 3))}"
  },
  jal : {
    rd = "${${BITFIELD rd [(0:11,7)]}}",
    brTarget = "${std::to_string(ic.current_address_ + (((etiss_int32)(${BITFIELD imm [(20:31,31)|(12:19,12)|(11:20,20)|(1:30,21)]} << 11)) >> 11))}"
  },
  jalr : {
    rs1 = "${${BITFIELD rs1_addr [(0:19,15)]}}",
    rd = "${${BITFIELD rd [(0:11,7)]}}",
    brTarget = "(*((RV32IMACFD*)cpu)->X[${${BITFIELD rs1_data [(0:19,15)]}}] + ${std::to_string((((etiss_int16)(${BITFIELD imm [(0:31,20)]} << 4)) >> 4))}) & -2U"
  }
}

/**************************************** Variants *****************************************/
CorePerfModel CV32E40P (
  core : "RV32IMACFD"
  use Pipeline : CV32E40P_pipeline
  use ConnectorModel : {regModel, staBranchPredModel}
)